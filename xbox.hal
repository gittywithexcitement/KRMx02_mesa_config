## Dan's xbox controller file
## Left trigger is slow jog. Right trigger is fast jog.
## X,Y,A,B buttons, while held, are incremental movement at varying speeds.
## Left joystick is X,Y. Left D pad is Z.
## Back button engages E stop.
## Start button turns E stop off, then turns machine on.
## Left shoulder button and X, Y, or B (corresponding to Z axis) zeros G54 to current position for that axis
## Right shoulder button starts the homing sequence
## Center X button switches between MDI and manual (but this change is not reflected in the UI)

# I'm not sure if the -KRA does anything
loadusr -W hal_input -KRA X-Box

# values < 6000 become 0
setp input.0.abs-x-flat 6000
setp input.0.abs-y-flat 6000

# invert z and y axis
setp input.0.abs-y-scale -32767.5
setp input.0.abs-hat0y-scale -1

loadrt or2	names=y-or-a,a-or-b,x-or-y,any-increment-pressed
loadrt near count=9
loadrt and2 names=x-pos-and-any-inc,x-neg-and-any-inc,y-pos-and-any-inc,y-neg-and-any-inc,z-pos-and-any-inc,z-neg-and-any-inc,x-and-lb,y-and-lb,b-and-lb
loadrt mux2 names=jog-speed-choice,x-analog-choice,y-analog-choice,z-analog-choice
loadrt mux4 names=cont-jog-speed
loadrt mux8 names=incremental-move-size
loadrt not 	names=left-z-pressed,right-z-pressed,mode-toggle-not
loadrt scale 		names=cont-jog-scale,decrease-z-speed
loadrt joyhandle 	names=slow-joy,fast-joy
loadrt toggle names=mode-toggle

addf y-or-a servo-thread
addf a-or-b servo-thread
addf x-or-y servo-thread
addf any-increment-pressed servo-thread
addf incremental-move-size servo-thread
addf jog-speed-choice servo-thread
addf x-analog-choice servo-thread
addf y-analog-choice servo-thread
addf z-analog-choice servo-thread
addf cont-jog-speed servo-thread
addf near.0 servo-thread
addf near.1 servo-thread
addf near.2 servo-thread
addf near.3 servo-thread
addf near.4 servo-thread
addf near.5 servo-thread
addf near.6 servo-thread
addf near.7 servo-thread
addf near.8 servo-thread
addf x-pos-and-any-inc servo-thread
addf y-pos-and-any-inc servo-thread
addf z-pos-and-any-inc servo-thread
addf x-neg-and-any-inc servo-thread
addf y-neg-and-any-inc servo-thread
addf z-neg-and-any-inc servo-thread
addf x-and-lb servo-thread
addf y-and-lb servo-thread
addf b-and-lb servo-thread
addf left-z-pressed servo-thread
addf right-z-pressed servo-thread
addf mode-toggle-not servo-thread
addf cont-jog-scale servo-thread
addf decrease-z-speed servo-thread
addf slow-joy servo-thread
addf fast-joy servo-thread
addf mode-toggle servo-thread

##### Incremental jog is enabled by pressing X,Y,A, or B (which set the increment size), and the stick must be at the min/max to trigger a jog #####
# For incremental jog, joystick must be all the way to the min or max to trigger
setp near.0.in1 1
setp near.1.in1 1
setp near.2.in1 1
setp near.3.in1 -1
setp near.4.in1 -1
setp near.5.in1 -1

# near function should be a little forgiving
setp near.0.scale 1.03
setp near.1.scale 1.03
setp near.2.scale 1.03
setp near.3.scale 1.03
setp near.4.scale 1.03
setp near.5.scale 1.03

# set the size of incremental moves in units
setp incremental-move-size.in0 0  # this one must be 0 to prevent motion unless a button is pressed
setp incremental-move-size.in1 0.00052360 # 1 microstep
setp incremental-move-size.in2 0.0052360 # 1 full step
setp incremental-move-size.in3 0.026180
setp incremental-move-size.in4 0.099483
setp incremental-move-size.in5 0
setp incremental-move-size.in6 0
setp incremental-move-size.in7 0

# set incremental jog size
# Y or A
net btn-y y-or-a.in0 <= input.0.btn-y
net btn-a y-or-a.in1 <= input.0.btn-a
# A or B
net btn-a => a-or-b.in0
net btn-b a-or-b.in1 <= input.0.btn-b
# setup the mux
net jog-size-0 incremental-move-size.sel0 <= y-or-a.out 	# Y or A
net a-or-b-out incremental-move-size.sel1 <= a-or-b.out 	# A or B
net btn-x incremental-move-size.sel2 <= input.0.btn-x		# X
# use mux to select increment size
net jog-size-final halui.jog.0.increment halui.jog.1.increment halui.jog.2.increment <= incremental-move-size.out

# any-increment-pressed is true if any of X,Y,A,B is pressed
net btn-x x-or-y.in0
net btn-y x-or-y.in1
net a-or-b-out => any-increment-pressed.in0
net depressed-xy any-increment-pressed.in1 <= x-or-y.out

# read joystick positions and check if near min or max
net joy-x-sig near.0.in2 near.3.in2 <= input.0.abs-x-position
net joy-y-sig near.1.in2 near.4.in2 <= input.0.abs-y-position
net joy-z-sig near.2.in2 near.5.in2 <= input.0.abs-hat0y-position

# if joystick near min/max and X,Y,A, or B pressed, then send incremental jog
net jogincx x-pos-and-any-inc.in0 <= near.0.out
net jogincy y-pos-and-any-inc.in0 <= near.1.out
net jogincz z-pos-and-any-inc.in0 <= near.2.out
net jogincxn x-neg-and-any-inc.in0 <= near.3.out
net jogincyn y-neg-and-any-inc.in0 <= near.4.out
net joginczn z-neg-and-any-inc.in0 <= near.5.out

# and will be true if joystick near min/max and X,Y,A, or B pressed
net jog-inc-enable any-increment-pressed.out => x-pos-and-any-inc.in1 y-pos-and-any-inc.in1 z-pos-and-any-inc.in1 x-neg-and-any-inc.in1 y-neg-and-any-inc.in1 z-neg-and-any-inc.in1

# To change the direction of incremental move (e.g. if moves opposite to desired) just change the plus and minus portion of halui.jog.N.increment-(plus or minus)

# and2 outputs to halui incremental jog
net jogincx_final halui.jog.0.increment-plus <= x-pos-and-any-inc.out
net jogincy_final halui.jog.1.increment-plus <= y-pos-and-any-inc.out
net jogincz_final halui.jog.2.increment-plus <= z-pos-and-any-inc.out
net jogincxn_final halui.jog.0.increment-minus <= x-neg-and-any-inc.out
net jogincyn_final halui.jog.1.increment-minus <= y-neg-and-any-inc.out
net joginczn_final halui.jog.2.increment-minus <= z-neg-and-any-inc.out


##### Continuous jog #####
# setup near to detect when L and R triggers are pressed (> 0)
# set L and R trigger to range [0,1]
setp input.0.abs-z-scale 255
setp input.0.abs-z-offset 0
setp input.0.abs-rz-scale 255
setp input.0.abs-rz-offset 0
# near is true when trigger is not pressed
setp near.7.in1 0
setp near.8.in1 0
net left-z-pos 	near.7.in2 <= input.0.abs-z-position
net right-z-pos	near.8.in2 <= input.0.abs-rz-position
# near function should be a little forgiving
setp near.7.difference .1
setp near.8.difference .1
# output of button-near-0 passes through not function to produce a 'pressed' signal
net left-z-zeroed 	near.7.out => left-z-pressed.in
net right-z-zeroed	near.8.out => right-z-pressed.in

# feed position of L trigger through joyhandle. pos=0 -> gain=0.0 pos=1 -> gain=0.5
net left-z-pos => slow-joy.in
# a power of 1 makes it linear
# inverted = true means mirror around the y=x line
#power=4 invert=0 --> in=.5 out=.93
#power=4 invert=1 --> in=.5 out=.07
# increase power to make the trigger spend more time in the slower portions of its curve, i.e. more sensitive in the slow zone
setp slow-joy.power 3
setp slow-joy.offset 0
# this determines the maximum speed of slow jog
setp slow-joy.scale 1
setp slow-joy.inverse 0
# parameters that I have left unset
# joyhandle.N.deadband float rw (default: 0.)

#TODO fine tune fast and slow speed, including power parameter

# feed position of R trigger through joyhandle. pos=0 -> gain=1. pos=1 -> gain=4
net right-z-pos => fast-joy.in
# increase power to make the trigger spend more time in the slower portions of its curve, i.e. more sensitive in the slow zone
setp fast-joy.power 2.5
setp fast-joy.offset 1
# this determines maximum speed of fast jog
setp fast-joy.scale 5
setp fast-joy.inverse 0

# cont-jog-speed is a mux that chooses the max speed of continuous jog. It's 0 when incremental jog is on, and if both slow trigger and fast trigger are pressed, it prefers the slow trigger
net fast-gain cont-jog-speed.in0 <= fast-joy.out
setp cont-jog-speed.in1 0
setp cont-jog-speed.in3 0
net slow-gain cont-jog-speed.in2 <= slow-joy.out
net jog-inc-enable => cont-jog-speed.sel0
net cjss1 cont-jog-speed.sel1 <= left-z-pressed.out

# this defines the base continuous jog speed
setp cont-jog-scale.in 100
# the L & R triggers determine the gain
net scale-gain cont-jog-scale.gain <= cont-jog-speed.out
setp cont-jog-scale.offset 0
# gain * 100 IPM is max continuous jog speed (which is then multiplied by analog joystick value to get actual jog speed)

# halui.jog-speed should be set to a nonzero value for incremental jog to work. So we mux between cont-jog-scale and a constant value
net cjso jog-speed-choice.in0 <= cont-jog-scale.out
setp jog-speed-choice.in1 50
net jog-inc-enable => jog-speed-choice.sel
net jog-speed halui.jog-speed <= jog-speed-choice.out

# set Z speed to 60% of XY speed
net joy-z-sig => decrease-z-speed.in
setp decrease-z-speed.gain .60
setp decrease-z-speed.offset 0

# jog.N.analog should be 0 during incremental jog, and the controller's value otherwise
net joy-x-sig => x-analog-choice.in0
net joy-y-sig => y-analog-choice.in0
net dzso decrease-z-speed.out => z-analog-choice.in0
setp x-analog-choice.in1 0
setp y-analog-choice.in1 0
setp z-analog-choice.in1 0
net jog-inc-enable => x-analog-choice.sel y-analog-choice.sel z-analog-choice.sel
net xaco x-analog-choice.out => halui.jog.0.analog
net yaco y-analog-choice.out => halui.jog.1.analog
net zaco z-analog-choice.out => halui.jog.2.analog

# back button (named 'select' in LinuxCNC 2.7) turns ESTOP on
net set-ESTOP input.0.btn-select 	=> halui.estop.activate
# start button unsets ESTOP (first press) and turns machine on (2nd press)
net unset-ESTOP input.0.btn-start => halui.estop.reset halui.machine.on

# Big central X button switches between MDI and Manual Control
net mti input.0.btn-mode => mode-toggle.in
net mto mode-toggle.out => halui.mode.mdi
net mto => mode-toggle-not.in
net mtno mode-toggle-not.out => halui.mode.manual

# LB and the X,Y,or B (corresponds to Z) zeros the selected axis
net btn-x => x-and-lb.in0
net btn-y => y-and-lb.in0
net btn-b => b-and-lb.in0
net btm-tl input.0.btn-tl => x-and-lb.in1 y-and-lb.in1 b-and-lb.in1
net xalo x-and-lb.out => halui.mdi-command-00
net yalo y-and-lb.out => halui.mdi-command-01
net balo b-and-lb.out => halui.mdi-command-02

# RB starts the homing sequence
# disabled
#net homeall halui.home-all <= input.0.btn-tr

# XYB buttons select XYZ axes for homing purposes
net btn-x halui.joint.0.select
net btn-y halui.joint.1.select
net btn-b halui.joint.2.select
